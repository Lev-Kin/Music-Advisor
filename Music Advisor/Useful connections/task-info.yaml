type: edu
custom_name: stage3
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";

        private static final int accessServerPort = 45678;
        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();
            tokenServer.start();

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                return Server.checkResult;
            }

            userProgram.stopBackground();

            String outputAfterAuth = userProgram.getOutput();
            if (!outputAfterAuth.contains(fictiveAccessToken)) {
                return CheckResult.wrong("Not found correct access token in the result. " +
                        "Make sure, that you use the server from the command line arguments to access the token.");
            }

            userProgram.execute("featured");

            String outputAfterFeatured = userProgram.getOutput();
            if (!outputAfterFeatured.contains("---FEATURED---")) {
                return CheckResult.wrong("When \"featured\" was inputted there should be \"---FEATURED---\" line");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testNewWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("new");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeaturedWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("featured");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
        }

    }
  learner_created: false
- name: src/advisor/Menu.java
  visible: true
  text: |
    package advisor;

    import java.util.*;
    import java.util.stream.Collectors;

    public class Menu {
       public void MenuLoop() {
           Scanner scanner = new Scanner(System.in);
           menuLoop:
           while (true) {
               String command = scanner.nextLine();

               if (!Settings.getAccess() && !(command.equals("auth") || command.equals("exit"))) {
                   System.out.println("Please, provide access for application.");
                   continue;
               }

               if (command.contains("playlists ")) {
                   Categories category = Categories.getCategory(command.split(" ")[1]);
                   System.out.println("---" + category.getLabel() + " PLAYLISTS---");
                   for (String s : new MusicLoader().load(category))
                       System.out.println(s);
               } else {
                   switch (command) {
                       case "exit":
                           System.out.println("---GOODBYE!---");
                           break menuLoop;
                       case "featured":
                           System.out.println("---FEATURED---");
                           for (String s : featured())
                               System.out.println(s);
                           break;
                       case "new":
                           System.out.println("---NEW RELEASES---");
                           for (String s : newMusic())
                               System.out.println(s);
                           break;
                       case "categories":
                           System.out.println("---CATEGORIES---");
                           for (String s : categoryList())
                               System.out.println(s);
                           break;
                       case "auth":
                           if (Settings.authorizeAccess()) {
                               System.out.println("making http request for access_token...");
                               if (Settings.getAccessToken()) {
                                   System.out.println("---SUCCESS---");
                                   Settings.setAccess();
                               } else {
                                   System.out.println("try again");
                               }
                           } else {
                               System.out.println("try again");
                           }
                           break;
                       default:
                           break;
                   }
               }
           }
       }

       private List<String> featured() {
           return List.of("Mellow Morning",
                   "Wake Up and Smell the Coffee",
                   "Monday Motivation",
                   "Songs to Sing in the Shower");
       }

       private List<String> newMusic() {
           return List.of("Mountains [Sia, Diplo, Labrinth]",
                    "Runaway [Lil Peep]",
                    "The Greatest Show [Panic! At The Disco]",
                    "All Out Life [Slipknot]");
        }

        private List<String> categoryList() {
           return Arrays.stream(Categories.values())
                   .map(Categories::getLabel)
                   .collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/advisor/Categories.java
  visible: true
  text: |
    package advisor;

    public enum Categories {
        TOP_LISTS("Top Lists"),
        POP("Pop"),
        MOOD("Mood"),
        LATIN("Latin");

        private final String label;

        public String getLabel() {
            return this.label;
        }

        public static Categories getCategory(String label) {
            for (Categories c : Categories.values())
                if (c.label.equals(label))
                    return c;
            return null;
        }

        Categories(String label) {
            this.label = label;
        }
    }
  learner_created: true
- name: src/advisor/Server.java
  visible: true
  text: |
    package advisor;

    import com.sun.net.httpserver.*;
    import java.io.IOException;
    import java.net.InetSocketAddress;
    import java.util.regex.*;

    public class Server {
        //Singleton instance
        private static Server instance = null;

        //regex for extracting code
        Pattern codePattern = Pattern.compile("(?<=code=).+");

        //Instance variables
        private HttpServer httpServer;
        private String code = null;
        private boolean hasResponse = false;

        public static Server getServer() {
            if (instance == null)
                instance = new Server();
            return instance;
        }

        public String getCode() {
            return code;
        }

        public boolean getResponse() {
            return hasResponse;
        }

        public void start() {
            httpServer.start();
        }

        public void stop() {
            httpServer.stop(1);
        }

        private Server() {
            try {
                httpServer = HttpServer.create();
                httpServer.bind(new InetSocketAddress(8080), 0);
                httpServer.createContext("/", new HttpHandler() {
                    @Override
                    public void handle(HttpExchange exchange) throws IOException {
                        String query = exchange.getRequestURI().getQuery();
                        if (query == null) {
                            String reject = "Authorization code not found. Try again.";
                            exchange.sendResponseHeaders(200, reject.length());
                            exchange.getResponseBody().write(reject.getBytes());
                            exchange.getResponseBody().close();
                            return;
                        }
                        hasResponse = true;
                        Matcher m = codePattern.matcher(query);
                        if (m.find())
                        {
                            code = m.group();
                            String hello = "Got the code. Return back to your program.";
                            exchange.sendResponseHeaders(200, hello.length());
                            exchange.getResponseBody().write(hello.getBytes());
                            exchange.getResponseBody().close();
                        } else {
                            String reject = "Authorization code not found. Try again.";
                            exchange.sendResponseHeaders(200, reject.length());
                            exchange.getResponseBody().write(reject.getBytes());
                            exchange.getResponseBody().close();
                        }
                    }
                });
            } catch (IOException e) {
                System.out.println("Server init failed!");
                System.out.println(e.getMessage() + " " + e.getStackTrace());
            }
        }
    }
  learner_created: true
- name: src/advisor/MusicLoader.java
  visible: true
  text: |
    package advisor;

    import java.util.List;

    public class MusicLoader {
        public List<String> load(Categories c) {
            if (c == Categories.TOP_LISTS) {
                return List.of("Walk like A Badass");
            } else if (c == Categories.LATIN) {
                return List.of("Rage Beats");
            } else if (c == Categories.POP) {
                return List.of("Arab Mood Booster");
            } else if (c == Categories.MOOD) {
                return List.of("Walk Like A Badass",
                        "Rage Beats",
                        "Arab Mood Booster",
                        "Sunday Stroll");
            } else {
                return null;
            }
        }
    }
  learner_created: true
- name: src/advisor/Settings.java
  visible: true
  text: |
    package advisor;

    import java.io.IOException;
    import java.net.URI;
    import java.net.http.*;

    public class Settings {
        private static boolean access = false;
        private static String serverPath = "https://accounts.spotify.com";
        private static String redirectURI = "http://localhost:8080&response_type=code";
        private static String clientID = "SOME_RANDOM_STRING";
        private static String clientSecret = "ANOTHER_RANDOM_STRING";
        private static String authCode;

        public static boolean authorizeAccess() {
            Server server = Server.getServer();
            server.start();
            System.out.println("use this link to request the access code: ");
            System.out.println(serverPath
                    + "/authorize?client_id="
                    + Settings.getClientID()
                    + "&redirect_uri=" + redirectURI);
            System.out.println("waiting for code...");
            while (server.getCode() == null) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    System.out.println(e.getMessage());
                }
            }
            if (server.getCode() != null) {
                System.out.println("code received");
                authCode = server.getCode();
                server.stop();
                return true;
            } else {
                System.out.println("try again");
                server.stop();
                return false;
            }
        }

        public static boolean getAccessToken() {
            HttpClient client = HttpClient.newBuilder().build();
            HttpRequest request = HttpRequest.newBuilder()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .uri(URI.create(serverPath + "/api/token"))
                    .POST(HttpRequest.BodyPublishers.ofString("grant_type=authorization_code"
                            + "&code=" + authCode
                            + "&redirect_uri=" + redirectURI
                            + "&client_id=" + clientID
                            + "&client_secret=" + clientSecret))
                    .build();
            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                System.out.println("response:");
                System.out.println(response.body());
                return true;
            } catch (InterruptedException | IOException e) {
                return false;
            }
        }

        public static String getAuthCode() {
            return authCode;
        }

        public static void setServerPath(String serverPath) {
            Settings.serverPath = serverPath;
        }

        public static void setAccess() {
            access = !access;
        }

        public static boolean getAccess() {
            return access;
        }

        public static String getClientID() {return clientID;}
    }
  learner_created: true
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?error=access_denied"))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                        || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                            "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                        + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                        "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5479#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 05 Jun 2022 15:51:16 UTC
record: 3
